#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ —Å Clean Architecture
# –°–æ–∑–¥–∞–µ—Ç 4-—Å–ª–æ–π–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É: Domain, Application, Infrastructure, WebAPI
# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É —Å–ª–æ—è–º–∏ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./create-clean-architecture.sh <–ø—É—Ç—å_–∫_—Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π_–ø–∞–ø–∫–µ> <–∏–º—è_–ø—Ä–æ–µ–∫—Ç–∞>

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
if [ $# -ne 2 ]; then
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 <–ø—É—Ç—å_–∫_—Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π_–ø–∞–ø–∫–µ> <–∏–º—è_–ø—Ä–æ–µ–∫—Ç–∞>"
    echo "–ü—Ä–∏–º–µ—Ä: $0 /home/user/projects MyProject"
    exit 1
fi

# –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
PARENT_PATH=$1
PROJECT_NAME=$2

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –ø–∞–ø–∫–∏
if [ ! -d "$PARENT_PATH" ]; then
    echo "–û—à–∏–±–∫–∞: –ü–∞–ø–∫–∞ $PARENT_PATH –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    exit 1
fi

# –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
PROJECT_PATH="$PARENT_PATH/$PROJECT_NAME"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
if [ -d "$PROJECT_PATH" ]; then
    echo "–û—à–∏–±–∫–∞: –ü–∞–ø–∫–∞ $PROJECT_PATH —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    exit 1
fi

echo "üöÄ –°–æ–∑–¥–∞–Ω–∏–µ Clean Architecture —Ä–µ—à–µ–Ω–∏—è..."
echo "üìÅ –ü—É—Ç—å: $PROJECT_PATH"
echo "üìã –ò–º—è –ø—Ä–æ–µ–∫—Ç–∞: $PROJECT_NAME"
echo ""

# –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞
mkdir -p "$PROJECT_PATH"
cd "$PROJECT_PATH"

# –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
echo "üìÇ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫..."
mkdir src
mkdir tests

echo ""
echo "‚öôÔ∏è  –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤..."

# –°–æ–∑–¥–∞–µ–º .gitignore
echo "  üîß –°–æ–∑–¥–∞–Ω–∏–µ .gitignore..."
dotnet new gitignore

# –°–æ–∑–¥–∞–µ–º .editorconfig
echo "  üîß –°–æ–∑–¥–∞–Ω–∏–µ .editorconfig..."
dotnet new editorconfig

# –°–æ–∑–¥–∞–µ–º global.json –¥–ª—è —Ñ–∏–∫—Å–∞—Ü–∏–∏ –≤–µ—Ä—Å–∏–∏ .NET SDK
echo "  üîß –°–æ–∑–¥–∞–Ω–∏–µ global.json..."
cat > global.json << 'EOF'
{
  "sdk": {
    "version": "8.0.412",
    "rollForward": "latestFeature"
  }
}
EOF

# –°–æ–∑–¥–∞–µ–º Directory.Build.props –¥–ª—è –æ–±—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
echo "  üîß –°–æ–∑–¥–∞–Ω–∏–µ Directory.Build.props..."
cat > Directory.Build.props << 'EOF'
<Project>
  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>
</Project>
EOF

# –°–æ–∑–¥–∞–µ–º .gitattributes –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤ –≤ Git
echo "  üîß –°–æ–∑–¥–∞–Ω–∏–µ .gitattributes..."
cat > .gitattributes << 'EOF'
# Auto detect text files and perform LF normalization
* text=auto

# C# files
*.cs text diff=csharp

# Visual Studio Solution files
*.sln text eol=crlf

# Visual Studio Project files
*.csproj text
*.vbproj text
*.vcxproj text
*.vcproj text
*.dbproj text
*.fsproj text

# JetBrains Rider files
*.DotSettings text

# XML project files
*.xml text
*.props text
*.targets text

# JSON files
*.json text

# Markdown files
*.md text

# Git files
.gitattributes text
.gitignore text

# Binary files
*.dll binary
*.exe binary
*.pdb binary
*.zip binary
*.7z binary
*.tar.gz binary

# JetBrains Rider cache and temp files
*.tmp binary
*.bak binary
EOF

echo ""
echo "üì¶ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è –∏ –ø—Ä–æ–µ–∫—Ç–æ–≤..."

# –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Ä–µ—à–µ–Ω–∏—è
echo "  üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è $PROJECT_NAME.sln..."
dotnet new sln -n "$PROJECT_NAME"

# –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã Clean Architecture —Å–ª–æ–µ–≤
echo "  üìã –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ Clean Architecture..."
echo "    - –°–æ–∑–¥–∞–Ω–∏–µ Domain —Å–ª–æ—è (—Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Å–ª–æ–π —Å –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–æ–π)..."
dotnet new classlib -n "$PROJECT_NAME.Domain" -o "src/$PROJECT_NAME.Domain"

echo "    - –°–æ–∑–¥–∞–Ω–∏–µ Application —Å–ª–æ—è (use cases –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã)..."
dotnet new classlib -n "$PROJECT_NAME.Application" -o "src/$PROJECT_NAME.Application"

echo "    - –°–æ–∑–¥–∞–Ω–∏–µ Infrastructure —Å–ª–æ—è (—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)..."
dotnet new classlib -n "$PROJECT_NAME.Infrastructure" -o "src/$PROJECT_NAME.Infrastructure"

echo "    - –°–æ–∑–¥–∞–Ω–∏–µ WebAPI —Å–ª–æ—è (—Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)..."
dotnet new webapi -n "$PROJECT_NAME.WebAPI" -o "src/$PROJECT_NAME.WebAPI"

# –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
echo "  üß™ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤..."
echo "    - –°–æ–∑–¥–∞–Ω–∏–µ UnitTests (—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Domain + Application)..."
dotnet new xunit -n "$PROJECT_NAME.UnitTests" -o "tests/$PROJECT_NAME.UnitTests"

echo "    - –°–æ–∑–¥–∞–Ω–∏–µ IntegrationTests (—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Infrastructure + WebAPI)..."
dotnet new xunit -n "$PROJECT_NAME.IntegrationTests" -o "tests/$PROJECT_NAME.IntegrationTests"

echo ""
echo "üîó –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ —Ä–µ—à–µ–Ω–∏–µ..."

# –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã –≤ .sln —Ñ–∞–π–ª
dotnet sln add "src/$PROJECT_NAME.Domain/$PROJECT_NAME.Domain.csproj"
dotnet sln add "src/$PROJECT_NAME.Application/$PROJECT_NAME.Application.csproj"
dotnet sln add "src/$PROJECT_NAME.Infrastructure/$PROJECT_NAME.Infrastructure.csproj"
dotnet sln add "src/$PROJECT_NAME.WebAPI/$PROJECT_NAME.WebAPI.csproj"
dotnet sln add "tests/$PROJECT_NAME.UnitTests/$PROJECT_NAME.UnitTests.csproj"
dotnet sln add "tests/$PROJECT_NAME.IntegrationTests/$PROJECT_NAME.IntegrationTests.csproj"

echo ""
echo "üîó –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π Clean Architecture..."

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∏–Ω—Ü–∏–ø–∞–º Clean Architecture
# Application –∑–∞–≤–∏—Å–∏—Ç —Ç–æ–ª—å–∫–æ –æ—Ç Domain
dotnet add "src/$PROJECT_NAME.Application" reference "src/$PROJECT_NAME.Domain"

# Infrastructure –∑–∞–≤–∏—Å–∏—Ç –æ—Ç Application –∏ Domain (—Ä–µ–∞–ª–∏–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –∏–∑ Application)
dotnet add "src/$PROJECT_NAME.Infrastructure" reference "src/$PROJECT_NAME.Application"
dotnet add "src/$PROJECT_NAME.Infrastructure" reference "src/$PROJECT_NAME.Domain"

# WebAPI –∑–∞–≤–∏—Å–∏—Ç —Ç–æ–ª—å–∫–æ –æ—Ç Application (—Å–ª–µ–¥—É–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø—É –∏–Ω–≤–µ—Ä—Å–∏–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)
dotnet add "src/$PROJECT_NAME.WebAPI" reference "src/$PROJECT_NAME.Application"

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
# UnitTests —Ç–µ—Å—Ç–∏—Ä—É—é—Ç Domain –∏ Application —Å–ª–æ–∏
dotnet add "tests/$PROJECT_NAME.UnitTests" reference "src/$PROJECT_NAME.Domain"
dotnet add "tests/$PROJECT_NAME.UnitTests" reference "src/$PROJECT_NAME.Application"

# IntegrationTests —Ç–µ—Å—Ç–∏—Ä—É—é—Ç Infrastructure –∏ WebAPI —Å–ª–æ–∏
dotnet add "tests/$PROJECT_NAME.IntegrationTests" reference "src/$PROJECT_NAME.Infrastructure"
dotnet add "tests/$PROJECT_NAME.IntegrationTests" reference "src/$PROJECT_NAME.WebAPI"

echo ""
echo "üßπ –û—á–∏—Å—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤..."

# –£–¥–∞–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ Class1.cs —Ñ–∞–π–ª—ã
if [ -f "src/$PROJECT_NAME.Domain/Class1.cs" ]; then
    rm "src/$PROJECT_NAME.Domain/Class1.cs"
    echo "  ‚úì –£–¥–∞–ª–µ–Ω src/$PROJECT_NAME.Domain/Class1.cs"
fi

if [ -f "src/$PROJECT_NAME.Application/Class1.cs" ]; then
    rm "src/$PROJECT_NAME.Application/Class1.cs"
    echo "  ‚úì –£–¥–∞–ª–µ–Ω src/$PROJECT_NAME.Application/Class1.cs"
fi

if [ -f "src/$PROJECT_NAME.Infrastructure/Class1.cs" ]; then
    rm "src/$PROJECT_NAME.Infrastructure/Class1.cs"
    echo "  ‚úì –£–¥–∞–ª–µ–Ω src/$PROJECT_NAME.Infrastructure/Class1.cs"
fi

# –£–¥–∞–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–π .http —Ñ–∞–π–ª
if [ -f "src/$PROJECT_NAME.WebAPI/$PROJECT_NAME.WebAPI.http" ]; then
    rm "src/$PROJECT_NAME.WebAPI/$PROJECT_NAME.WebAPI.http"
    echo "  ‚úì –£–¥–∞–ª–µ–Ω src/$PROJECT_NAME.WebAPI/$PROJECT_NAME.WebAPI.http"
fi

# –£–ø—Ä–æ—â–∞–µ–º Program.cs –¥–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
echo "  üîß –£–ø—Ä–æ—â–µ–Ω–∏–µ Program.cs..."
PROGRAM_CS_PATH="src/$PROJECT_NAME.WebAPI/Program.cs"
if [ -f "$PROGRAM_CS_PATH" ]; then
    cat > "$PROGRAM_CS_PATH" << 'EOF'
var builder = WebApplication.CreateBuilder(args);

var app = builder.Build();

app.Run();
EOF
    echo "  ‚úì –û–±–Ω–æ–≤–ª–µ–Ω src/$PROJECT_NAME.WebAPI/Program.cs"
fi

# –£–¥–∞–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ UnitTest1.cs —Ñ–∞–π–ª—ã
if [ -f "tests/$PROJECT_NAME.UnitTests/UnitTest1.cs" ]; then
    rm "tests/$PROJECT_NAME.UnitTests/UnitTest1.cs"
    echo "  ‚úì –£–¥–∞–ª–µ–Ω tests/$PROJECT_NAME.UnitTests/UnitTest1.cs"
fi

if [ -f "tests/$PROJECT_NAME.IntegrationTests/UnitTest1.cs" ]; then
    rm "tests/$PROJECT_NAME.IntegrationTests/UnitTest1.cs"
    echo "  ‚úì –£–¥–∞–ª–µ–Ω tests/$PROJECT_NAME.IntegrationTests/UnitTest1.cs"
fi

echo ""
echo "üèóÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞..."

# –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —Å–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ–µ–∫—Ç
if dotnet build > /dev/null 2>&1; then
    echo ""
    echo "‚úÖ Clean Architecture —Ä–µ—à–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!"
    echo "üìÅ –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: $PROJECT_PATH"
    echo ""
    echo "üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞:"
    echo "$PROJECT_NAME/"
    echo "‚îú‚îÄ‚îÄ $PROJECT_NAME.sln"
    echo "‚îú‚îÄ‚îÄ Directory.Build.props"
    echo "‚îú‚îÄ‚îÄ global.json"
    echo "‚îú‚îÄ‚îÄ .gitignore"
    echo "‚îú‚îÄ‚îÄ .editorconfig"
    echo "‚îú‚îÄ‚îÄ .gitattributes"
    echo "‚îú‚îÄ‚îÄ src/"
    echo "‚îÇ   ‚îú‚îÄ‚îÄ $PROJECT_NAME.Domain/           # –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞, —Å—É—â–Ω–æ—Å—Ç–∏"
    echo "‚îÇ   ‚îú‚îÄ‚îÄ $PROJECT_NAME.Application/      # Use cases, –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã"
    echo "‚îÇ   ‚îú‚îÄ‚îÄ $PROJECT_NAME.Infrastructure/   # –í–Ω–µ—à–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"
    echo "‚îÇ   ‚îî‚îÄ‚îÄ $PROJECT_NAME.WebAPI/           # API endpoints"
    echo "‚îî‚îÄ‚îÄ tests/"
    echo "    ‚îú‚îÄ‚îÄ $PROJECT_NAME.UnitTests/        # –¢–µ—Å—Ç—ã Domain + Application"
    echo "    ‚îî‚îÄ‚îÄ $PROJECT_NAME.IntegrationTests/ # –¢–µ—Å—Ç—ã Infrastructure + WebAPI"
    echo ""
    echo "üéØ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Clean Architecture:"
    echo "Domain ‚Üê Application ‚Üê Infrastructure"
    echo "       ‚Üê Application ‚Üê WebAPI"
    echo ""
    echo "üöÄ –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:"
    echo "cd $PROJECT_PATH"
    echo "dotnet run --project src/$PROJECT_NAME.WebAPI"
    echo ""
    echo "üß™ –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤:"
    echo "dotnet test"
else
    echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ –ø—Ä–æ–µ–∫—Ç–∞"
    echo "–ó–∞–ø—É—Å—Ç–∏—Ç–µ 'dotnet build' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—à–∏–±–æ–∫"
    exit 1
fi